#/bin/bash

script_path=$(realpath `dirname ${BASH_SOURCE[0]}`)
source ${script_path}/clean.env

ENV_TOP_DIR=$(realpath `pwd` | sed 's:/cbuild.*::')/cbuild
root_outname=output

ENV_BUILD_MODE=external  # external internal yocto
ENV_BUILD_SOC=$1
ENV_BUILD_ARCH=
ENV_BUILD_TOOL=$2
ENV_BUILD_JOBS=

KERNEL_VER=
KERNEL_SRC=
KERNEL_OUT=

if [ ! -z "${ENV_BUILD_SOC}" ]; then
    export ENV_BUILD_SOC
    machinetool=${ENV_TOP_DIR}/scripts/bin/process_machine.sh
    ENV_BUILD_ARCH=$($machinetool linux_arch)
    KERNEL_VER=$($machinetool linux_version)
    KERNEL_SRC=${ENV_TOP_DIR}/${root_outname}/kernel/linux-${KERNEL_VER}
    if [ -z "${ENV_BUILD_TOOL}" ]; then
        ENV_BUILD_TOOL=$($machinetool toolchain_path)/$($machinetool toolchain_dir)/bin/$($machinetool cross_compile)
    fi
fi

total_cpus=`nproc`
if [ ${total_cpus} -ge 32 ]; then
    ENV_BUILD_JOBS=-j$(( (${total_cpus} + 3) / 4 ))
elif [ ${total_cpus} -ge 16 ]; then
    ENV_BUILD_JOBS=-j$(( (${total_cpus} + 1) / 2 ))
elif [ ${total_cpus} -ge 8 ]; then
    ENV_BUILD_JOBS=-j8
else
    ENV_BUILD_JOBS=-j${total_cpus}
fi

ENV_MAKE_DIR=${ENV_TOP_DIR}/scripts/core
ENV_TOOL_DIR=${ENV_TOP_DIR}/scripts/bin
ENV_DOWN_DIR=${ENV_TOP_DIR}/${root_outname}/mirror-cache/downloads
ENV_CACHE_DIR=${ENV_TOP_DIR}/${root_outname}/mirror-cache/build-cache
# Start http server: python -m http.server 8888
ENV_MIRROR_URL=http://127.0.0.1:8888

ENV_TOP_OUT=${ENV_TOP_DIR}/${root_outname}
if [ ! -z "${ENV_BUILD_SOC}" ]; then
    ENV_TOP_OUT=${ENV_TOP_DIR}/${root_outname}/${ENV_BUILD_SOC}
else
    ENV_TOP_OUT=${ENV_TOP_DIR}/${root_outname}/noarch
fi

ENV_CFG_ROOT=${ENV_TOP_OUT}/config
ENV_OUT_ROOT=${ENV_TOP_OUT}/objects
ENV_INS_ROOT=${ENV_TOP_OUT}/sysroot
ENV_DEP_ROOT=${ENV_INS_ROOT}
ENV_OUT_HOST=${ENV_TOP_OUT}/objects-native
ENV_INS_HOST=${ENV_TOP_OUT}/sysroot-native
ENV_DEP_HOST=${ENV_INS_HOST}

if [ ! -z "${KERNEL_SRC}" ]; then
    KERNEL_OUT=${ENV_OUT_ROOT}/linux-${KERNEL_VER}
fi

echo "============================================================"
echo "ENV_BUILD_MODE   : ${ENV_BUILD_MODE}"
if [ ! -z "${ENV_BUILD_SOC}" ]; then
    echo "ENV_BUILD_SOC    : ${ENV_BUILD_SOC}"
    echo "ENV_BUILD_ARCH   : ${ENV_BUILD_ARCH}"
    echo "ENV_BUILD_TOOL   : ${ENV_BUILD_TOOL}"
fi
echo "ENV_BUILD_JOBS   : ${ENV_BUILD_JOBS}"

if [ ! -z "${ENV_BUILD_SOC}" ]; then
    echo "KERNEL_VER       : ${KERNEL_VER}"
    echo "KERNEL_SRC       : ${KERNEL_SRC}"
    echo "KERNEL_OUT       : ${KERNEL_OUT}"
fi

echo "ENV_TOP_DIR      : ${ENV_TOP_DIR}"
echo "ENV_MAKE_DIR     : ${ENV_MAKE_DIR}"
echo "ENV_TOOL_DIR     : ${ENV_TOOL_DIR}"
echo "ENV_DOWN_DIR     : ${ENV_DOWN_DIR}"
echo "ENV_CACHE_DIR    : ${ENV_CACHE_DIR}"
echo "ENV_MIRROR_URL   : ${ENV_MIRROR_URL}"

echo "ENV_TOP_OUT      : ${ENV_TOP_OUT}"
echo "ENV_CFG_ROOT     : ${ENV_CFG_ROOT}"
echo "ENV_OUT_ROOT     : ${ENV_OUT_ROOT}"
echo "ENV_INS_ROOT     : ${ENV_INS_ROOT}"
echo "ENV_DEP_ROOT     : ${ENV_DEP_ROOT}"
echo "ENV_OUT_HOST     : ${ENV_OUT_HOST}"
echo "ENV_INS_HOST     : ${ENV_INS_HOST}"
echo "ENV_DEP_HOST     : ${ENV_DEP_HOST}"
echo "============================================================"

if [ ! -z "${ENV_BUILD_SOC}" ]; then
    export ENV_BUILD_MODE ENV_BUILD_SOC ENV_BUILD_ARCH ENV_BUILD_TOOL ENV_BUILD_JOBS
    export KERNEL_VER KERNEL_SRC KERNEL_OUT
else
    export ENV_BUILD_MODE ENV_BUILD_JOBS
    unset ENV_BUILD_SOC ENV_BUILD_ARCH ENV_BUILD_TOOL
    unset KERNEL_VER KERNEL_SRC KERNEL_OUT
fi
export ENV_TOP_DIR ENV_MAKE_DIR ENV_TOOL_DIR ENV_DOWN_DIR ENV_CACHE_DIR ENV_MIRROR_URL
export ENV_TOP_OUT ENV_CFG_ROOT ENV_OUT_ROOT ENV_INS_ROOT ENV_DEP_ROOT ENV_OUT_HOST ENV_INS_HOST ENV_DEP_HOST
